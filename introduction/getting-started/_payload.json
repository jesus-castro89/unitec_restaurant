[{"data":1,"prerenderedAt":78},["Reactive",2],{"search-api":3},[4,11,21,29,36,59,69],{"id":5,"path":6,"dir":7,"title":8,"description":7,"keywords":9,"body":10},"content:0.index.md","/","","Home",[],"     Proyecto de ProgramaciÃ³n Ciclo 24-1.   Proyecto de gestiÃ³n de un Restaurante mediante Java.    DefiniciÃ³n de paquetes   Clases Abstractas ,   Interfaces ,   Tipos Enumerados  Interfaz GrÃ¡fica (GUI)  Manejo de Archivos",{"id":12,"path":13,"dir":14,"title":15,"description":16,"keywords":17,"body":20},"content:1.introduction:1.getting-started.md","/introduction/getting-started","introduction","Iniciando el Proyecto","La presente documentaciÃ³n tiene como objetivo guiarte paso a paso en la construcciÃ³n, ediciÃ³n, documentaciÃ³n y pruebas del proyecto integrador de la asignatura: ProgramaciÃ³n Orientada a Objetos.",[18,19],"Creemos un nuevo proyecto","Plugins Recomendados","  Iniciando el Proyecto  La presente documentaciÃ³n tiene como objetivo guiarte paso a paso en la construcciÃ³n, ediciÃ³n, documentaciÃ³n y pruebas del proyecto integrador de la asignatura: ProgramaciÃ³n Orientada a Objetos.  En esta ocasiÃ³n, nos centraremos en la creaciÃ³n de un sistema de gestiÃ³n de un restaurante, por lo que en primer lugar nos centraremos en la gestiÃ³n de los ingredientes, platillos y menÃºs, pero descuida, tambiÃ©n incluiremos la interacciÃ³n con el usuario al poder tomar su orden y llevar un control de pedidos y de ganancias.  Por lo que pongamos manos a la obra.  Creemos un nuevo proyecto  Lo primero que debemos de hacer es crear un nuevo proyecto en el IDE de nuestra preferencia, aunque para efectos concretos, se sugiere usar el IntelliJ IDEA para poder aprovechar los atajos y recursos que en el se encuentran.  Plugins Recomendados  Dentro de el IDE, podemos personalizar varias cosas, entre ellas el conjunto de plugins que podremos usar en nuestro proyecto actual y posteriores, por lo que ahora veremos como ingresar a este apartado.  En primer lugar tendremos que acceder al menu: \"  File \" > \"  Settings \"  Lo cual hÃ¡ra que se muestra la siguiente ventana:    En este apartado deberemos de seleccionar el apartado \"Plugins\", en dÃ³nde encontraremos una lista de Plugins bastante interesante que puedes explorar, sin embargo, se recomienda buscar e instalar los siguientes:    Indent Rainbow\n   Este complemento nos permitirÃ¡ ver los elementos identados de un color diferente dentro del editor, lo cual puede ayudar a notar si algo esta fuera de lÃ­nea en la estructura de nuestro cÃ³digo.  Inspection Lens\n   Este Plugin nos mostrarÃ¡ tanto los   errores  como los   warnings  de nuestro cÃ³digo junta a la lÃ­nea que los presente. Lo cual ayuda mucho a la hora de buscar que esta mal en nuestros cÃ³digos.  Rainbow Brackets Lite\n   Este Plugin nos marcarÃ¡ de diferentes colores cada llave, corchete y parÃ©ntesis que usemos en nuestro cÃ³digo, lo cual a la hora de trabajar con diveras funciÃ³n y/o clases, siempre es de ayuda.   âœ¨ Y con esto abremos creado nuestro proyecto e instalado los plugins recomendados, por lo que ahora podremos estructurar los paquetes de nuestro proyecto para continuar trabajardo.",{"id":22,"path":23,"dir":14,"title":24,"description":25,"keywords":26,"body":28},"content:1.introduction:2.project-structure.md","/introduction/project-structure","Estructura del Proyecto","Una vez que hemos creado nuestro proyecto y hemos configurado los plugins o complementos recomendados, es momento de crear la estructura de carpetas o paquetes.",[27],"Estructura de paquetes","  Estructura del Proyecto  Una vez que hemos creado nuestro proyecto y hemos configurado los plugins o complementos recomendados, es momento de crear la estructura de carpetas o paquetes.  Hay que recalcar lo siguiente, dentro de IntelliJ IDEA, al momento de crear paquetes y no contar con clases o elementos dentro, puede pasar algo como lo siguiente:\n   Como se peude notar en la imagen, lo que sucede por ejemplo al crear el paquete   starters  y dentro   salads , lo que sucederÃ¡ en primer lugar es lo anterior. Esto sucede porque el sistema de paquetes entiendo que el paquete salads es el Ãºnico dentro de   starters .  Entonces, Â¿no puedo crear otro paquete dentro de   starters ? La respuesta es si, veamos como.  Lo que debes hacer es dar click derecho sobre el paquete que creaste primero, en este caso   starters.salads , y debemos dar click en new package y veremos lo siguiente:\n   Como se puede notar, vemos una texto que esta separando los paquetes por puntos, es decir, restaurant es el paquete principal, dentro esta   starters  y dentro de   starters  esta   salads . Â¿Entonces no se supone que lo que coloque esarÃ¡ dentro de   salads ? Y bueno, la respuesta es si, pero si borro el texto hasta el punto despues de   salads  y la cambio por   soups  por ejemplo, entonces crearemos un paquete llamado   soups , dentro de   starters . Es decir, hacerlo de esta forma:\n   Ahora si, cuando demos enter, lo que sucederÃ¡ es que se creara un paquete al nivel de salada y ahora lo veremos como en el arbol de abajo.  Estructura de paquetes  Una vez que hemos visto lo anterior, lo que deberemos de hacer es crear la siguiente estructua de paquetes dentro de nuestro proyecto. Hay que destacar que esta es la estructura inicial del proyecto, por lo que si hay alguna modificaciÃ³n se ira indicando, por ejemplo, en la entrega del avance del primer parcial es posible que las carpetas o paquetes sugeridas son algo diferentes, esto es mÃ¡s que nada para objetivos de evaluaciÃ³n, pero al final migraremos a esta estructura final.   ðŸ“¦ unitec_restaurant\nâ””â”€Â src\nÂ Â Â â””â”€Â restaurant\nÂ Â Â Â Â Â â”œâ”€Â desserts\nÂ Â Â Â Â Â â”‚Â Â â”œâ”€Â icecreams\nÂ Â Â Â Â Â â”‚Â Â â”œâ”€Â flans\nÂ Â Â Â Â Â â”‚Â Â â””â”€Â mousses\nÂ Â Â Â Â Â â”œâ”€Â dish_types\nÂ Â Â Â Â Â â”œâ”€Â drinks\nÂ Â Â Â Â Â â”‚Â Â â”œâ”€Â bottled_drinks\nÂ Â Â Â Â Â â”‚Â Â â”œâ”€Â fresh_waters\nÂ Â Â Â Â Â â”‚Â Â â””â”€Â wines\nÂ Â Â Â Â Â â”œâ”€Â main_dishes\nÂ Â Â Â Â Â â”‚Â Â â”œâ”€Â meat_cuts\nÂ Â Â Â Â Â â”‚Â Â â”œâ”€Â pastas\nÂ Â Â Â Â Â â”‚Â Â â””â”€Â pizza\nÂ Â Â Â Â Â â”œâ”€Â starters\nÂ Â Â Â Â Â â”‚Â Â â”œâ”€Â salads\nÂ Â Â Â Â Â â”‚Â Â â”œâ”€Â soups\nÂ Â Â Â Â Â â”‚Â Â â””â”€Â tapas\nÂ Â Â Â Â Â â”œâ”€Â ui\nÂ Â Â Â Â Â â””â”€Â uti\n  Â©generated by   Project Tree Generator  This is the minimal directory structure to get an up and running Docus website.     content/\n     index.md\n   app.config.ts\n   nuxt.config.ts\n  Una vez que hemos creado nuestra estructura de paquetes, es hora de empezar con el proceso de programaciÃ³n.  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":30,"path":31,"dir":14,"title":32,"description":33,"keywords":34,"body":35},"content:1.introduction:3.dish-types.md","/introduction/dish-types","Tipos de Platillos","Dentro del paquete dish_types, deberemos de crear tres tipos enumerados, cada uno representando a cada uno de los grandes tipos de plantillos: Entradas, Platos Fuertes y Postres.",[],"  Tipos de Platillos  Dentro del paquete dish_types, deberemos de crear tres tipos enumerados, cada uno representando a cada uno de los grandes tipos de plantillos: Entradas, Platos Fuertes y Postres.  Por lo tanto, ahora veremos como crear cada uno de estos apartados.",{"id":37,"path":38,"dir":39,"title":40,"description":41,"keywords":42,"body":58},"content:2.api:1.components.md","/api/components","api","Components","Discover every component you can use in your content.",[43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"\u003CAlert />","\u003CBadge />","\u003CBlockHero />","\u003CButtonLink />","\u003CCallout />","\u003CCard />","\u003CCardGrid />","\u003CCodeGroup />","\u003CCodeBlock />","\u003CCopyButton />","\u003CIcon />","\u003CList />","\u003CSandbox />","\u003CTerminal />","\u003CVideoPlayer />","  Components  Discover every component you can use in your content.   \u003CAlert />     Check out an   info  alert with   code  and a   link .   Check out a   success  alert with   code  and a   link .   Check out a   warning  alert with   code  and a   link .   Check out a   danger  alert with   code  and a   link .     ::alert{type=\"info\"}\n   Check out an   **info**   alert with   `code`   and a [  link  ](  /  ).\n   ::\n   \n   ::alert{type=\"success\"}\n   Check out a   **success**   alert with   `code`   and a [  link  ](  /  ).\n   ::\n   \n   ::alert{type=\"warning\"}\n   Check out a   **warning**   alert with   `code`   and a [  link  ](  /  ).\n   ::\n   \n   ::alert{type=\"danger\"}\n   Check out a   **danger**   alert with   `code`   and a [  link  ](  /  ).\n   ::\n     \u003CBadge />   \u003CBadge />  support same types as   \u003CAlert /> .     v1.2  Deprecated   Not found!     :badge[  v1.2  ]\n   \n   :badge[  Deprecated  ]{type=\"warning\"}\n   \n   ::badge{type=\"danger\"}\n   Not found!\n   ::\n     \u003CBlockHero />      Document-driven framework   Docus reconciles content creators and developers by offering to both the best tools to create and scale content-based websites.     ::block-hero\n   ---\n   cta:\n     -   Get started\n     -   /get-started\n   secondary:\n     -   Open on GitHub â†’\n     -   https://github.com/nuxtlabs/docus\n   snippet: npx nuxi@latest init docus-app -t nuxtlabs/docus-starter\n   ---\n   #title\n   Document-driven framework\n   \n   #description\n   Docus reconciles content creators and developers by offering to both the best tools to create and scale content-based websites.\n   ::\n     \u003CButtonLink />    Play on StackBlitz     :button-link[Play on StackBlitz]{icon=\"IconStackBlitz\" href=\"https://stackblitz.com/github/nuxtlabs/docus-starter\" blank}\n     \u003CCallout />   \u003CCallout />  support same types as   \u003CAlert /> .      This is a callout! Click me to open.   This is the content of the callout.    This is a callout! Click me to open.   This is the content of the callout.     ::callout\n   #summary\n   This is a callout! Click me to open.\n   \n   #content\n   This is the content of the callout.\n   ::\n    \n   ::callout{type=\"warning\"}\n   #summary\n   This is a callout! Click me to open.\n   \n   #content\n   This is the content of the callout.\n   ::\n     \u003CCard />      Nuxt Architecture.   Based on   Nuxt 3  and   Nuxt Content .   \nUse Nuxt to build a static site, or a serverless app.      ::card{icon=\"logos:nuxt-icon\"}\n    #title\n    Nuxt Architecture.\n    #description\n    Based on   **Nuxt 3**   and   **Nuxt Content**  . :br\n    Use Nuxt to build a static site, or a serverless app.\n    ::\n     \u003CCardGrid />      What's included?      Nuxt Architecture.   Harness the full power of Nuxt and the Nuxt ecosystem.    Vue Components.   Use built-in components (or your own!) inside your content.    Write Markdown.   Enjoy the ease and simplicity of Markdown and discover MDC syntax.     ::card-grid\n   #title\n   What's included\n   \n   #root\n   :ellipsis\n   \n   #default\n     ::card\n     #title\n     Nuxt Architecture.\n     #description\n     Harness the full power of Nuxt and the Nuxt ecosystem.\n     ::\n     ::card\n     #title\n     Vue Components.\n     #description\n     Use built-in components (or your own!) inside your content.\n     ::\n     ::card\n     #title\n     Write Markdown.\n     #description\n     Enjoy the ease and simplicity of Markdown and discover MDC syntax.\n     ::\n   ::\n     \u003CCodeGroup />  This component uses   slots  to create a tab panel of your code examples or preview.        yarn   add   docus\n     npm   install   docus\n     ::code-group\n     ```bash [Yarn]\n     yarn   add   docus\n     ```\n     ```bash [NPM]\n     npm   install   docus\n     ```\n   ::\n     \u003CCodeBlock />  To be used inside a   \u003CCodeGroup />  component to display a preview of some rendered code.     Hello World!     /* Added as a child of   `\u003CCodeGroup />`   */\n   \n   ::code-block{label=\"Preview\" preview}\n     ::badge\n     Hello World!\n     ::\n   ::\n     \u003CCopyButton />        :copy-button{content=\"hey!\"}\n     \u003CIcon />  Icon component gives you access to all   100,000+  icons from   icones.js.org .          :icon{name=\"logos:nuxt-icon\"}\n   :icon{name=\"logos:vue\"}\n   :icon{name=\"logos:nuxt-icon\"}\n     \u003CList />       Important  Always    Amazing  Congrats    Do you know?  You can also do this    Be careful  Use with precautions    Drinking too much  Driving drunk     ::list{type=\"primary\"}\n   -   **Important**\n   -   Always\n   ::\n   \n   ::list{type=\"success\"}\n   -   Amazing\n   -   Congrats\n   ::\n   \n   ::list{type=\"info\"}\n   -   Do you know?\n   -   You can also do this\n   ::\n   \n   ::list{type=\"warning\"}\n   -   Be careful\n   -   Use with precautions\n   ::\n   \n   ::list{type=\"danger\"}\n   -   Drinking too much\n   -   Driving drunk\n   ::\n    \u003CSandbox />  Embed CodeSandbox/StackBlitz easily in your documentation with great performances.  Using the   IntersectionObserver  to load when visible in the viewport.        :sandbox{src=\"https://codesandbox.io/embed/nuxt-content-l164h?hidenavigation=1&theme=dark\"}\n     \u003CTerminal />        :terminal{content=\"nuxi build\"}\n     \u003CVideoPlayer />         ::div\n     :video-player{src=\"https://www.youtube.com/watch?v=o9e12WbKrd8\"}\n   ::\n   html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":60,"path":61,"dir":39,"title":62,"description":63,"keywords":64,"body":68},"content:2.api:2.composables.md","/api/composables","Composables","Discover the Docus composables to use in your custom Vue components and pages.",[65,66,67],"useDocus()","useMenu()","useScrollspy()","  Composables  Discover the Docus composables to use in your custom Vue components and pages.   useDocus()    useDocus  ()\n  gives access to docus runtime config, all default values and your custom config from   app.config.ts    config  refers to the merged config of the current page.   main ,   header ,   aside ,   footer  and   titleTemplate  can be set from   _dir.yml  and any   page.md  file.  The configs in   app.config  file will be used as defaults.     \u003C  script   setup  >\n   const   {   config   }   =   useDocus  ()\n   \u003C/  script  >\n   \n   \u003C  template  >\n     \u003C  div  >\n       \u003C  h1  >{{ config.title }}\u003C/  h1  >\n       \u003C  p  >{{ config.description }}\u003C/  p  >\n     \u003C/  div  >\n   \u003C/  template  >\n    tree  refers to the current navigation tree that is displayed in the   aside  component.     \u003C  script   setup  >\n   const   {   tree   }   =   useDocus  ()\n   \u003C/  script  >\n   \n   \u003C  template  >\n     \u003C  DocsAsideTree   :links  =  \"tree\"   />\n   \u003C/  template  >\n    useMenu()   useMenu()  gives access to   $menu  plugin controlling mobile navigation globally.     const   {\n     // Is menu visible\n     visible  ,\n     // Close menu function\n     close  ,\n     // Open menu function\n     open  ,\n     // Toggle menu function\n     toggle\n   }   =   useMenu  ()\n    useScrollspy()   useScrollspy()  is used in   docs  layout to make the ToC display the currently visible headings.     const   {\n     // Headings on the page\n     visibleHeadings  ,\n     // Active headings (for the current page)\n     activeHeadings  ,\n     // Update headings (an array of DOM nodes)\n     updateHeadings\n   }   =   useScrollspy  ()\n   html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":70,"path":71,"dir":39,"title":72,"description":73,"keywords":74,"body":77},"content:2.api:3.layouts.md","/api/layouts","Layouts","Docus provides multiple built-in layouts for displaying your Markdown pages.",[75,76],"default","page","  Layouts  Docus provides multiple built-in layouts for displaying your Markdown pages.   default  The default layout for every page created in the project. This layout renders multiple section alongside the content:   Aside navigation menu (togglable with   aside: false/true )  Page bottom section (togglable with   bottom: false/true )  Table of content (togglable with   toc: false/true )     ---\n   aside  :   true\n   bottom  :   true\n   toc  :   false\n   ---\n   \n   Your awesome content\n  Current page is live sample of default layout.   page   page  layout is content focused layout. This layout does not render aside menu of table of contents.  This layout accept some configuration from content front-matter.    fluid : By setting   fluid: true  in content front-matter the content will be rendered in full width.   constrainedClass : Using this option you can modify layout container look. Like constraining layout width of changing the background.   padded : Setting   padded: true  in front-matter will add horizontal padding in the layout.     ---\n   title  :   Home\n   layout  :   page\n   fluid  :   true\n   ---\n  Check   Home page  as live sample of page layout  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",1697828071658]